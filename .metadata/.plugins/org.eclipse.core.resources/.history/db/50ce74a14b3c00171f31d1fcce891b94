package com.Pandahyun.Main;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType.SlotType;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.material.MaterialData;
import org.bukkit.inventory.Inventory;
import org.bukkit.plugin.java.JavaPlugin;

import com.Pandahyun.Main.Particles;

public class main extends JavaPlugin implements Listener {

	public HashMap<String, Boolean> Setting = new HashMap<String, Boolean>();
	public static HashMap<String, Integer> TaskIds = new HashMap<String, Integer>();
	public List<String> Particle = new ArrayList<String>();
	public List<String> Shape = new ArrayList<String>();

	public final int BOOK = 403;
	/*
	 * private FileConfiguration CustomConfig = null; private File CustomFile =
	 * null;
	 */
	private File ConfigFile = new File(getDataFolder() + "config.yml");

	int i = 0, j, nMax;

	public void onEnable() {
		getServer().getPluginManager().registerEvents(this, this);
		Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[K-online]" + ChatColor.WHITE + " 파티클 후원 시스템 기동!");
		if (!ConfigFile.exists()) {
			Shape.add("Circle");
			Shape.add("Up_Circle");
			Shape.add("On_Head");
			Shape.add("AngelWing");

			Particle.add("Flame");
			Particle.add("Heart");
			Particle.add("Smoke");
			Particle.add("Fireworks_spark");
			Particle.add("Spell");

			getConfig().set("Settings.Shapes", Shape);
			getConfig().set("Settings.Particles", Particle);

			saveConfig();
			return;
		}
		Particle = getConfig().getStringList("Settings.Particles");
		Shape = getConfig().getStringList("Settings.Shapes");
	}

	public void onDisable() {
		Bukkit.getConsoleSender().sendMessage(ChatColor.AQUA + "[K-online]" + ChatColor.WHITE + " 파티클 후원 시스템 정상종료!");
	}

	public boolean onCommand(CommandSender sender, Command label, String command, String[] args) {
		Player player = (Player) sender;
		if (command.equalsIgnoreCase("kparticle") || command.equalsIgnoreCase("kpt")) {
			if (args.length > 0) {
				if (args[0].equalsIgnoreCase("help"))
					CommandHelp(player);

				else if (args[0].equalsIgnoreCase("view")) {
					if (args.length > 1) {
						if (sGetP(args[1]) != null && sGetP(args[1]).isOnline())
							SettingGUI(player, sGetP(args[1]));
						else
							player.sendMessage("[ERROR] 없는 플레이어 입니다");
					} else
						ParticleGUI(player, player);
				}

				else if (args[0].equalsIgnoreCase("stop")) {
					if (args.length > 1 && sGetP(args[1]) != null && sGetP(args[1]).isOnline())
						stopParticle(sGetP(args[1]));
					else
						getServer().getScheduler().cancelTask(TaskIds.get(sGetU(player)));
				}

				else if (args[0].equalsIgnoreCase("give")) {
					if (args.length > 3) {
						Player givePlayer = sGetP(args[1]);
						if (givePlayer != null && givePlayer.isOnline()) {
							if (args[2].equalsIgnoreCase("Particle"))
								giveItem("[K - Particle] " + args[3], BOOK, 0, 1,
										Arrays.asList(ChatColor.AQUA + "케이온라인 파티클 시스템",
												Particle.contains(args[3]) ? args[3] : ChatColor.RED + "없는 파티클입니다.",ChatColor.RESET + "Type : Particle"),
										sGetP(args[1]));

							else if (args[2].equalsIgnoreCase("Shape"))
								giveItem("[K - Particle] " + args[3], BOOK, 0, 1,
										Arrays.asList(ChatColor.AQUA + "케이온라인 파티클 시스템",
												Shape.contains(args[3]) ? args[3] : ChatColor.RED + "없는 모양입니다.", ChatColor.RESET + "Type : Shape"),
										sGetP(args[1]));

							else
								player.sendMessage("[Error] /kpt give <Player> particle (or shape) <String>");
						} else
							player.sendMessage("온라인 상에 있지 않은 플레이어 에게는 줄 수 없습니다");
					} else
						player.sendMessage("[Error] /kpt give <Player> particle (or shape) <String>");
					saveConfig();
				}
			} else
				CommandHelp(player);
		}
		return false;
	}

	@EventHandler
	public void onJoinEvent(PlayerJoinEvent e) {
		Player p = e.getPlayer();

		if (!(getConfig().contains("Players." + e.getPlayer().getUniqueId().toString()))) {
			List<String> pList = new ArrayList<String>();
			getConfig().set("Players." + e.getPlayer().getUniqueId().toString() + ".Having.Particles", pList);
			getConfig().set("Players." + e.getPlayer().getUniqueId().toString() + ".Having.Shape", pList);
			getConfig().set("Players." + e.getPlayer().getUniqueId().toString() + ".Settings.Selected.Shape", "None");
			getConfig().set("Players." + e.getPlayer().getUniqueId().toString() + ".Settings.Selected.Particle",
					"None");
			getConfig().set("Players." + sGetU(p) + ".Settings.OnOff", false);
			saveConfig();
		}

		TaskIds.put(sGetU(p),
				(Integer) getServer().getScheduler().scheduleSyncRepeatingTask(this, new Particles(this, p), 0, 2));
		e.getPlayer().sendMessage(TaskIds.get(sGetU(p)).toString() + "로 생성됨");

		giveItem("[K - Particle] Flame", BOOK, 0, 1, Arrays.asList(ChatColor.AQUA + "케이온라인 파티클 시스템", "Flame"), p);

		p.sendMessage(Particle.toString());
	}

	@EventHandler
	public void onQuitEvent(PlayerQuitEvent e) {
		if (TaskIds.containsKey(sGetU(e.getPlayer()))) {
			getServer().getScheduler().cancelTask(TaskIds.get(sGetU(e.getPlayer())));
			TaskIds.remove(sGetU(e.getPlayer()));
		}
	}

	@EventHandler
	public void onSelectedInventory(InventoryClickEvent event) {
		((Player) event.getWhoClicked()).sendMessage(event.getSlotType().toString());
		if (ChatColor.stripColor(event.getInventory().getName()).equalsIgnoreCase("K-Particle - Particles")) {
			event.setCancelled(true);

			if (!event.getSlotType().equals(SlotType.OUTSIDE) && !event.getCurrentItem().getType().equals(Material.AIR)
					&& event.getCurrentItem().hasItemMeta()
					&& event.getCurrentItem().getItemMeta().getDisplayName().contains(ChatColor.AQUA + "[KPT]")) {
				Player p = (Player) event.getWhoClicked();
				List<String> Having = getConfig().getStringList("Players." + sGetU(p) + ".Having.Particles");
				int slot = event.getSlot();

				event.setCancelled(true);
				setParticle(p, Having.get(slot));
				p.closeInventory();
				ParticleGUI((Player) event.getWhoClicked(),
						getServer().getPlayer(event.getInventory().getContents()[44].getItemMeta().getLore().get(1)));
				p.sendMessage(event.getInventory().getContents()[slot].getItemMeta().getDisplayName());
			}
		}
		
		else if (ChatColor.stripColor(event.getInventory().getName()).equals("K-Particle - Shapes")) {
			event.setCancelled(true);

			if (!event.getSlotType().equals(SlotType.OUTSIDE) && !event.getCurrentItem().getType().equals(Material.AIR)
					&& event.getCurrentItem().hasItemMeta()
					&& event.getCurrentItem().getItemMeta().getDisplayName().contains(ChatColor.AQUA + "[KPT]")) {
				Player p = (Player) event.getWhoClicked();
				List<String> Having = getConfig().getStringList("Players." + sGetU(p) + ".Having.Shapes");
				int slot = event.getSlot();

				event.setCancelled(true);
				setShape(p, Having.get(slot));
				p.closeInventory();
				ShapeGUI((Player) event.getWhoClicked(),
						getServer().getPlayer(event.getInventory().getContents()[44].getItemMeta().getLore().get(1)));
				p.sendMessage(event.getInventory().getContents()[slot].getItemMeta().getDisplayName());
			}
		}

		else if (ChatColor.stripColor(event.getInventory().getName()).contains("K-Particle - Setting")) {

			if (!event.getSlotType().equals(SlotType.OUTSIDE) && !event.getCurrentItem().getType().equals(Material.AIR)
					&& event.getCurrentItem().hasItemMeta()) {
				Player p = (Player) event.getWhoClicked();
				List<String> Having = getConfig().getStringList("Players." + sGetU(p) + ".Having.Particles");
				int slot = event.getSlot();

				event.setCancelled(true);

				switch (slot) {
				case 3:
					p.closeInventory();
					ParticleGUI((Player) event.getWhoClicked(), getServer()
							.getPlayer(event.getInventory().getContents()[0].getItemMeta().getLore().get(1)));
					break;
				case 4:
					p.closeInventory();
					ShapeGUI((Player) event.getWhoClicked(), getServer()
							.getPlayer(event.getInventory().getContents()[0].getItemMeta().getLore().get(1)));
					break;
				case 8:
					p.sendMessage(ChatColor.AQUA + "[KPT] " + ChatColor.RESET + "GUI가 닫혔습니다.");
					p.closeInventory();
					break;
				}

			}
		}
	}

	//

	public void ParticleGUI(Player showP, Player tarP) {
		Inventory inv = Bukkit.createInventory(showP, 45,
				ChatColor.BLUE + "" + ChatColor.BOLD + "K-Particle - Particles");
		List<String> Having = getConfig() .getStringList("Players." + tarP.getUniqueId().toString() + ".Having.Particles");
		
		if (!(Having.isEmpty()))
			for (int i = 0; i < Having.size(); ++i)
				setItem(ChatColor.AQUA + "[KPT] " + ChatColor.RESET + Having.get(i), BOOK, 0, 1,
						Arrays.asList(Having.get(i)
								.equalsIgnoreCase(getConfig().getString(
								"Players." + tarP.getUniqueId().toString() + ".Settings.Selected.Particle"))
								? "사용중" : "클릭시 사용"), i, inv);
		else {
			showP.sendMessage(ChatColor.RED + "[KPT] " + ChatColor.AQUA + tarP.getName() + ChatColor.RED + " 플러이어는 가지고 있는 파티클이 없습니다.");
			inv = null; Having = null;
			return;
		}
		setItem(ChatColor.AQUA + "현재 타켓", BOOK, 0, 1, Arrays.asList(ChatColor.RESET + "이 GUI의 정보의 타켓", tarP.getName()),44, inv);
		showP.openInventory(inv);
	}

	public void ShapeGUI(Player showP, Player tarP) {
		Inventory inv = Bukkit.createInventory(showP, 45,
				ChatColor.BLUE + "" + ChatColor.BOLD + "K-Particle - Shapes");
		List<String> Having = getConfig().getStringList("Players." + tarP.getUniqueId().toString() + ".Having.Shapes");
		if (!(Having.isEmpty()))
			for (int i = 0; i < Having.size(); ++i)
				setItem(ChatColor.AQUA + "[KPT] " + ChatColor.RESET + Having.get(i), BOOK, 0, 1,
						Arrays.asList(Having.get(i)
								.equalsIgnoreCase(getConfig().getString(
										"Players." + tarP.getUniqueId().toString() + ".Settings.Selected.Shape"))
												? "사용중" : "클릭시 사용"),i, inv);
		
		else {
			showP.sendMessage(ChatColor.RED + "[KPT] " + ChatColor.AQUA + tarP.getName() + ChatColor.RED + " 플러이어는 가지고 있는 모양이 없습니다.");
			inv = null; Having = null;
			return;
		}
		setItem(ChatColor.AQUA + "현재 타켓", BOOK, 0, 1, Arrays.asList(ChatColor.RESET + "이 GUI의 정보의 타켓", tarP.getName()), 44, inv);
		showP.openInventory(inv);
	}

	public void SettingGUI(Player showP, Player tarP) {
		Inventory inv = Bukkit.createInventory(showP, 9, ChatColor.BLUE + "K-Particle - Setting");

		setItem(ChatColor.AQUA + "현재 타겟", BOOK, 0, 1, Arrays.asList(ChatColor.RESET + "이 GUI의 정보의 타켓", tarP.getName()), 0, inv);
		setItem(ChatColor.AQUA + "파티클 확인", BOOK, 0, 1, Arrays.asList("당신이 가지고 있는 Particle을 확인 합니다"), 3, inv);
		setItem(ChatColor.AQUA + "모양 확인", BOOK, 0, 1, Arrays.asList("당신이 가지고 있는 Shape를 확인 합니다"), 4, inv);
		setItem(ChatColor.AQUA + "파티클 OnOff", BOOK, 0, 1, Arrays.asList("Particle is" +
		(getConfig().getBoolean("Players." + tarP.getUniqueId().toString() + ".Settings.OnOff") ? "On" : "Off")), 5, inv);
		setItem(ChatColor.AQUA + "GUI 닫기", BOOK, 0, 1, Arrays.asList("이 GUI를 닫습니다."), 8, inv);

		showP.openInventory(inv);
	}

	@EventHandler
	public void getParticle(PlayerInteractEvent e)
	{
		Player p = e.getPlayer();
		Action a = e.getAction();
		if(!p.getItemInHand().getType().equals(Material.AIR)
		 && p.getItemInHand().hasItemMeta())
		{
			String DisplayName = p.getItemInHand().getItemMeta().getDisplayName();
			List<String> lore = p.getItemInHand().getItemMeta().getLore();
			
			if(a==Action.RIGHT_CLICK_AIR || a==Action.RIGHT_CLICK_BLOCK)
			{
				
				if(p.getItemInHand().getType().getId() == BOOK &&
				p.getItemInHand().getItemMeta().getLore().size() > 1)
				{
					if(Particle.contains(lore.get(1)))
					{
						List<String> Having = getConfig().getStringList("Players." + p.getUniqueId().toString() + ".Having.Particles");
					
						if(Having.contains(lore.get(1)))
							p.sendMessage(ChatColor.AQUA + "[KPT] " + "이미 가지고 계십니다");
					
						else
						{
							Having.add(lore.get(1));
							getConfig().set("Players." + p.getUniqueId().toString() + ".Having.Particles", Having);
							saveConfig();
							p.getInventory().remove(p.getItemInHand());
							p.sendMessage(ChatColor.AQUA + "[KPT] " + ChatColor.RESET + DisplayName + " 파티클을 얻으셨습니다\n"
									+ "확인 명령어 /kpt view 로 확인 하실수 있습니다.");
						}
					}
					else if(Shape.contains(lore.get(1)))
					{
						List<String> Having = getConfig().getStringList("Players." + p.getUniqueId().toString() + ".Having.Shapes");
					
						if(Having.contains(lore.get(1)))
							p.sendMessage(ChatColor.AQUA + "[KPT] " + "이미 가지고 계십니다");
					
						else
						{
							Having.add(lore.get(1));
							getConfig().set("Players." + p.getUniqueId().toString() + ".Having.Shapes", Having);
							saveConfig();
							p.getInventory().remove(p.getItemInHand());
							p.sendMessage(ChatColor.AQUA + "[KPT] " + ChatColor.RESET + DisplayName + " 모양을 얻으셨습니다\n"
									+ "확인 명령어 /kpt view 로 확인 하실수 있습니다.");
						}
					}
				}
			}
		}
	}

	// private ItemStack makeItem(String Display, int ID, int DATA, int STACK,
	// List<String> lore)
	private void giveItem(String Display, int ID, int DATA, int STACK, List<String> lore, Player p) {
		ItemStack item = new MaterialData(ID, (byte) DATA).toItemStack(STACK);
		ItemMeta itemMeta = item.getItemMeta();

		itemMeta.setDisplayName(Display);
		itemMeta.setLore(lore);
		item.setItemMeta(itemMeta);

		p.getInventory().addItem(item);
	}

	private void setItem(String Display, int ID, int DATA, int STACK, List<String> lore, int loc, Inventory inv) {
		ItemStack item = new MaterialData(ID, (byte) DATA).toItemStack(STACK);
		ItemMeta itemMeta = item.getItemMeta();

		itemMeta.setDisplayName(Display);
		itemMeta.setLore(lore);
		item.setItemMeta(itemMeta);
		inv.setItem(loc, item);
	}

	public void setParticle(Player player, String Particle) {
		getConfig().set("Players." + player.getUniqueId().toString() + ".Settings.Selected.Particle", Particle);
		saveConfig();
	}

	public void setShape(Player player, String Shape) {
		getConfig().set("Players." + player.getUniqueId().toString() + ".Settings.Selected.Shape", Shape);
		saveConfig();
	}

	public void stopParticle(Player p) {
		getServer().getScheduler().cancelTask(TaskIds.get(sGetU(p)));
		p.sendMessage(p.getName() + "의 태스크를 삭제했습니다." + TaskIds.get(sGetU(p)));
		TaskIds.remove(sGetU(p));
	}

	/*
	 * private void reloadCustomConfig() { if(CustomFile == null) CustomFile =
	 * new File(getDataFolder(), "customconfig.yml"); CustomConfig =
	 * YamlConfiguration.loadConfiguration(CustomFile);
	 * 
	 * InputStream defConfigStream = this.getResource("config.yml");
	 * if(defConfigStream != null) { YamlConfiguration defConfig =
	 * YamlConfiguration.loadConfiguration(defConfigStream);
	 * CustomConfig.setDefaults(defConfig); } }
	 * 
	 * public void saveCustomConfig() { if(CustomFile == null || CustomConfig ==
	 * null) return; try { getCustomConfig().save(CustomFile); } catch
	 * (IOException e) {
	 * Bukkit.getConsoleSender().sendMessage("Can't save config"); } }
	 * 
	 * public void saveDefaultConfig() { if(CustomFile == null) CustomFile = new
	 * File(getDataFolder(),"customconfig.yml"); if(!CustomFile.exists())
	 * this.saveResource("config.yml", false); }
	 * 
	 * public FileConfiguration getCustomConfig() { if(CustomConfig == null)
	 * reloadCustomConfig(); return CustomConfig; }
	 */

	public String sGetU(Player p) // 유니크 아이디 받아오기
	{
		return p.getUniqueId().toString();
	}

	public void CommandHelp(Player sender) {
		sender.sendMessage("\n" + ChatColor.AQUA + "K-Particle 케이온라인 후원서비스 플러그인 By Pandahyun\n" + ChatColor.RESET
				+ "명령어 보기 - /kpt help" + "\n자신의 후원GUI 열기 - /kpt view" + "\n후원 파티클 멈추기 - /kpt stop"
				+ "\n다른이의 후원GUI 보기[OP] - /kpt view <플레이어명>"
				+ "\n후원 효과 주기[OP] - /kpt give <플레이어명> <Particle or Shape> <얻는 효과>"
				+ "\n후원 효과 뺐기[OP] - /kpt steal <플레이어명> <Particle or Shape> <뺏는 효과>"
				+ "\n후원 책 만들기[OP] - /kpt getBook <효과 이름> <파티클>");
	}

	private Player sGetP(String s) // 플레이어 받아오기
	{
		return getServer().getPlayer(s);
	}
}